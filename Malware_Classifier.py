from os import P_DETACH
import pandas as pd
from sklearn.model_selection import train_test_split
import xgboost as xgb
from sklearn.metrics import mean_squared_error
import numpy as np
from xgboost.training import train
from sklearn import preprocessing
from sklearn.metrics import explained_variance_score

class Model:

    def __init__(self):
        #Making Train Model
        x,y = Model.Get_Csv()
        data_matrix = xgb.DMatrix(data=x, label=y)

        x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)
        xg_reg = xgb.XGBRegressor(base_score=0.5, max_delta_step=0, min_child_weight=1, n_jobs=2, objective='binary:logistic', random_state=0, reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None, booster='gbtree', n_estimators = 200, learning_rate=0.08, gamma=0, subsample=0.75, colsample_bytree=1, max_depth = 10)
        
        xg_reg.fit(x_train, y_train)
        preds = xg_reg.predict(x_test)
        r_sq = xg_reg.score(x_train, y_train)
        print(r_sq)
        print(explained_variance_score(preds, y_test))

    def Get_Csv():
        #Get x, y from csv file
        csv_file = pd.read_csv('./pe_features.csv')
        x, y = csv_file.iloc[:, :-1],csv_file.iloc[:,-1]
        
        #Drop specific columns
        x = Model.Change_Types(Model.Check_Drop(x))
        
        #Describe Data
        #Model.Check_Describe(x)
        #Model.Check_Describe(y)
        return x, y
    
    def Check_Drop(x):
        #Manipulate columns for accuracy
        x = x.drop('e_ovno', axis=1)
        x = x.drop('AddressOfEntryPoint', axis=1)
        x = x.drop('EntryPoint', axis=1)
        x = x.drop('SectionAlignment', axis=1)
        x = x.drop('SizeOfImage', axis=1)
        x = x.drop('SizeOfHeaders', axis=1)
        x = x.drop('NumberOfRvaAndSizes', axis=1)
        x = x.drop('.textSectionName', axis=1)
        x = x.drop('.textSectionVirtualSize', axis=1)
        x = x.drop('.textSection|VirtualSize-SizeOfRawData|', axis=1)
        x = x.drop('raw_rich_header', axis=1)
        x = x.drop('.relocSectionName', axis=1)
        x = x.drop('.rdataSectionName', axis=1)
        return x

    def Change_Types(x):
        lbl = preprocessing.LabelEncoder()
        x['filename'] = lbl.fit_transform(x['filename'].astype(str))
        #x['.textSectionName'] = lbl.fit_transform(x['.textSectionName'].astype(str))
        #x['.textSectionVirtualSize'] = lbl.fit_transform(x['.textSectionVirtualSize'].astype(str))
        #x['.textSection|VirtualSize-SizeOfRawData|'] = lbl.fit_transform(x['.textSection|VirtualSize-SizeOfRawData|'].astype(str))
        #x['raw_rich_header'] = lbl.fit_transform(x['raw_rich_header'].astype(str))
        x['.textSectionVirtualAddress'] = lbl.fit_transform(x['.textSectionVirtualAddress'].astype(str))
        x['.textSectionSizeOfRawData'] = lbl.fit_transform(x['.textSectionSizeOfRawData'].astype(str))
        x['.textSectionPointerToRawData'] = lbl.fit_transform(x['.textSectionPointerToRawData'].astype(str))
        x['.textSectionCharacteristics'] = lbl.fit_transform(x['.textSectionCharacteristics'].astype(str))
        x['.textSectionEntropy'] = lbl.fit_transform(x['.textSectionEntropy'].astype(str))
        x['.dataSectionName'] = lbl.fit_transform(x['.dataSectionName'].astype(str))
        x['.dataSectionVirtualSize'] = lbl.fit_transform(x['.dataSectionVirtualSize'].astype(str))
        x['.dataSection|VirtualSize-SizeOfRawData|'] = lbl.fit_transform(x['.dataSection|VirtualSize-SizeOfRawData|'].astype(str))
        x['.dataSectionVirtualAddress'] = lbl.fit_transform(x['.dataSectionVirtualAddress'].astype(str))
        x['.dataSectionSizeOfRawData'] = lbl.fit_transform(x['.dataSectionSizeOfRawData'].astype(str))
        x['.dataSectionPointerToRawData'] = lbl.fit_transform(x['.dataSectionPointerToRawData'].astype(str))
        x['.dataSectionCharacteristics'] = lbl.fit_transform(x['.dataSectionCharacteristics'].astype(str))
        x['.dataSectionEntropy'] = lbl.fit_transform(x['.dataSectionEntropy'].astype(str))
        x['.rsrcSectionName'] = lbl.fit_transform(x['.rsrcSectionName'].astype(str))
        x['.rsrcSectionVirtualSize'] = lbl.fit_transform(x['.rsrcSectionVirtualSize'].astype(str))
        x['.rsrcSection|VirtualSize-SizeOfRawData|'] = lbl.fit_transform(x['.rsrcSection|VirtualSize-SizeOfRawData|'].astype(str))
        x['.rsrcSectionVirtualAddress'] = lbl.fit_transform(x['.rsrcSectionVirtualAddress'].astype(str))
        x['.rsrcSectionSizeOfRawData'] = lbl.fit_transform(x['.rsrcSectionSizeOfRawData'].astype(str))
        x['.rsrcSectionPointerToRawData'] = lbl.fit_transform(x['.rsrcSectionPointerToRawData'].astype(str))
        x['.rsrcSectionCharacteristics'] = lbl.fit_transform(x['.rsrcSectionCharacteristics'].astype(str))
        x['.rsrcSectionEntropy'] = lbl.fit_transform(x['.rsrcSectionEntropy'].astype(str))
        #x['.rdataSectionName'] = lbl.fit_transform(x['.rdataSectionName'].astype(str))
        x['.rdataSectionVirtualSize'] = lbl.fit_transform(x['.rdataSectionVirtualSize'].astype(str))
        x['.rdataSection|VirtualSize-SizeOfRawData|'] = lbl.fit_transform(x['.rdataSection|VirtualSize-SizeOfRawData|'].astype(str))
        x['.rdataSectionVirtualAddress'] = lbl.fit_transform(x['.rdataSectionVirtualAddress'].astype(str))
        x['.rdataSectionSizeOfRawData'] = lbl.fit_transform(x['.rdataSectionSizeOfRawData'].astype(str))
        x['.rdataSectionPointerToRawData'] = lbl.fit_transform(x['.rdataSectionPointerToRawData'].astype(str))
        x['.rdataSectionCharacteristics'] = lbl.fit_transform(x['.rdataSectionCharacteristics'].astype(str))
        x['.rdataSectionEntropy'] = lbl.fit_transform(x['.rdataSectionEntropy'].astype(str))
        #x['.relocSectionName'] = lbl.fit_transform(x['.relocSectionName'].astype(str))
        x['.relocSectionVirtualSize'] = lbl.fit_transform(x['.relocSectionVirtualSize'].astype(str))
        x['.relocSection|VirtualSize-SizeOfRawData|'] = lbl.fit_transform(x['.relocSection|VirtualSize-SizeOfRawData|'].astype(str))
        x['.relocSectionVirtualAddress'] = lbl.fit_transform(x['.relocSectionVirtualAddress'].astype(str))
        x['.relocSectionSizeOfRawData'] = lbl.fit_transform(x['.relocSectionSizeOfRawData'].astype(str))
        x['.relocSectionPointerToRawData'] = lbl.fit_transform(x['.relocSectionPointerToRawData'].astype(str))
        x['.relocSectionCharacteristics'] = lbl.fit_transform(x['.relocSectionCharacteristics'].astype(str))
        x['.relocSectionEntropy'] = lbl.fit_transform(x['.relocSectionEntropy'].astype(str))
        
        return x

    def Check_Describe(x):
        print("--------------Data--------------")
        print('{}'.format(x))
        print("--------------------------------")
        print("------------Describe------------")
        print('{}'.format(x.describe()))
        print("--------------------------------")
        print("-------------Dtypes-------------")
        print('{}'.format(x.dtypes))
        print("--------------------------------")


if __name__ == "__main__":
    Model()
